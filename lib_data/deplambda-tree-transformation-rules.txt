rulegroup {
  name: "relative clause (all rcmod)"
  priority: 1
  rule {
    name: "relative nsubj extraction"
    priority: 1
    tregex: "(l-rcmod=target < /t-V.*/) < (/l-(nsubj|dep)/=whchild < /t-W.*/)"
    # The company, which "bought" Youtube, owns Gmail.
    # (l-nsubj (l-p (l-p (l-dobj w-owns w-Gmail) w-,) w-.) (l-rcmod (l-p (l-det w-company w-The) w-,) (l-wh-nsubj (l-dobj w-bought w-Youtube) w-which)))
    # TODO(sivareddy): Remove l-dep label if this does not always hold.
    transformation {
      target: "whchild"
      action: CHANGE_LABEL
      label: "l-wh-nsubj"
    }
  }
  rule {
    name: "reduced relative pobj extraction"
    priority: 2
    tregex: "(l-rcmod=target < /t-V.*/) [< (l-prep=prep !< l-pobj) !< (/l-.*/ < /t-W.*/)]"
    # The country Darwin "belongs" to, is UK.
    # (l-attr (l-nsubj (l-p (l-p w-is w-,) w-.) w-UK) (l-rcmod (l-det w-country w-The) (l-BIND (l-nsubj (l-prep w-belongs (l-pobj w-to v-f0)) w-Darwin) v-f0)))
    transformation {
      target: "prep"
      action: ADD_CHILD
      label: "l-pobj"
      child: "v-f"
    }
    transformation {
      target: "target"
      action: ADD_CHILD
      label: "l-BIND"
      child: "v-f"
    }
  }
  rule {
    name: "relative pobj extraction"
    priority: 3
    tregex: "(l-rcmod=target < /t-V.*/) [< (l-prep=prep !< l-pobj) < (/l-.*/=whchild < /t-W.*/)]"
    # The country which Darwin "belongs" to, is UK.
    # (l-attr (l-nsubj (l-p (l-p w-is w-,) w-.) w-UK) (l-rcmod (l-det w-country w-The) (l-wh-pobj (l-BIND (l-nsubj (l-prep w-belongs (l-pobj w-to v-f0)) w-Darwin) v-f0) w-which)))
    # TODO(sivareddy): I met the girl who Nixon "is" married to. (Accurate parser gives rcmod to "is")
    transformation {
      target: "whchild"
      action: CHANGE_LABEL
      label: "l-wh-pobj"
    }
    transformation {
      target: "prep"
      action: ADD_CHILD
      label: "l-pobj"
      child: "v-f"
    }
    transformation {
      target: "target"
      action: ADD_CHILD
      label: "l-BIND"
      child: "v-f"
    }
  }
  rule {
    name: "reduced relative obj extraction"
    priority: 4
    tregex: "(l-rcmod=target < /t-V.*/) !< (/l-.*/ < /t-W.*/)"
    # The company Bill "founded", acquired Skype.
    # (l-nsubj (l-p (l-p (l-dobj w-acquired w-Skype) w-,) w-.) (l-rcmod (l-det w-company w-The) (l-BIND (l-nsubj (l-dobj w-founded v-f0) w-Bill) v-f0)))
    transformation {
      target: "target"
      action: ADD_CHILD
      label: "l-dobj"
      child: "v-f"
    }
    transformation {
      target: "target"
      action: ADD_CHILD
      label: "l-BIND"
      child: "v-f"
    }
  }
  rule {
    name: "relative obj extraction"
    priority: 5
    tregex: "(l-rcmod=target < /t-V.*/) < (/l-(dobj|dep)/=whchild < /t-W.*/)"
    # Apple, which Jobs "founded", developed Iphone.
    # (l-nsubj (l-p (l-p (l-dobj w-developed w-Iphone) w-,) w-.) (l-rcmod (l-p w-Apple w-,) (l-wh-dobj (l-BIND (l-nsubj (l-dobj w-founded v-f0) w-Jobs) v-f0) w-which)))
    transformation {
      target: "whchild"
      action: CHANGE_LABEL
      label: "l-wh-dobj"
    }
    transformation {
      target: "target"
      action: ADD_CHILD
      label: "l-dobj"
      child: "v-f"
    }
    transformation {
      target: "target"
      action: ADD_CHILD
      label: "l-BIND"
      child: "v-f"
    }
  }
}

rulegroup {
  name: "Questions nsubj/pobj/dobj identification/extraction"
  priority: 1
  rule {
    name: "nsubj identification"
    priority: 1
    tregex: "/l-dep/=target [ < /t-W.*/ & > (l-ROOT=verb !< /l-nsubj|l-nsubjpass/) ]"
    # "Who" "directed" Titanic ? (assuming the relation between directed and Who is l-dep)
    # l-ROOT is necessary to identify the sentence as question.
    # This is not treated as extraction.
    # Note: This is a hack, but improves results on WebQuestions.
    transformation {
      target: "target"
      action: CHANGE_LABEL
      label: "l-nsubj"
    }
  }
  rule {
    name: "pobj extraction"
    priority: 2
    # Note: The attr and nsubj targets are a hack to circumvent parse errors.
    tregex: "/l-(dep|pobj|dobj|advmod|attr|nsubj)/=target [< /t-W.*/ > (l-ROOT=verb  < (l-prep=prep !< l-pobj))]"
    # Who was Nixon married to?
    transformation {
      target: "target"
      action: CHANGE_LABEL
      label: "l-wh-pobj"
    }
    transformation {
      target: "prep"
      action: ADD_CHILD
      label: "l-pobj"
      child: "v-f"
    }
    transformation {
      target: "verb"
      action: ADD_CHILD
      label: "l-BIND"
      child: "v-f"
    }
  }
  rule {
    name: "np pobj extraction"
    priority: 2
    tregex: "/l-(dep|pobj|dobj|tmod|nsubj|nsubjpass|attr)/=target [ < (/l-.*/ < /t-W.*/) & > (l-ROOT=verb  < (l-prep=prep !< l-pobj))]"
    # A noun heading a question word and headed by a verb having PP-attachment with no pobj.
    # What "year" was Nixon married in?
    # Which "school" did Obama go to?
    # This is not l-wh-pobj since the target is a noun here.
    transformation {
      target: "target"
      action: CHANGE_LABEL
      label: "l-np-pobj"
    }
    transformation {
      target: "prep"
      action: ADD_CHILD
      label: "l-pobj"
      child: "v-f"
    }
    transformation {
      target: "verb"
      action: ADD_CHILD
      label: "l-BIND"
      child: "v-f"
    }
  }
  rule {
    name: "dobj identification"
    priority: 3
    tregex: "/l-dep/=target [ < /t-W.*/ & > (l-ROOT=verb  [< l-nsubj & !< l-dobj]) ]"
    # "What" did Cameron "direct" ? (assuming the relation between What and direct is l-dep)
    # Note: This is a hack, but improves results on WebQuestions.
    transformation {
      target: "target"
      action: CHANGE_LABEL
      label: "l-dobj"
    }
  }
  rule {
    name: "When/where questions"
    priority: 4
    tregex: "/l-advmod/=target < /t-W.*/ > l-ROOT"
    # Where was Nixon married?
    transformation {
      target: "target"
      action: CHANGE_LABEL
      label: "l-wh-advmod"
    }
  }
}

rulegroup {
  name: "Passives"
  priority: 1
  rule {
    # TODO(oscart): this rule tries to disambiguate passive subjects from
    # modifiers, e.g., "directed by Cameron" vs "directed by midnight". It is
    # far from ideal and will not generalize to coarse-grained tags. Therefore
    # we should consider removing it completely.
    name: "Passive by"
    priority: 1
    tregex: "l-prep=prep < w-by < t-IN << /t-(NNP.*|PRP.*)/ > (/l-.*/ < t-VBN < l-auxpass)"
    # Titanic was directed "by" Cameron.
    # (l-nsubjpass (l-p (l-pass-by (l-auxpass w-directed w-was) (l-pobj w-by w-Cameron)) w-.) w-Titanic)
    transformation {
      target: "prep"
      action: CHANGE_LABEL
      label: "l-pass-by"
    }
  }
  rule {
    # This is the same action as "Passive by" but is split out for readability.
    name: "Passive by in relative clause or reduced non-finite verbal modifier"
    priority: 2
    tregex: "l-prep=prep < w-by < t-IN << /t-(NNP.*|PRP.*)/ > (/l-(part|rc|inf)mod/ < t-VBN)"
    # Titanic, directed "by" Cameron, won Oscar.
    # Titanic, which was directed "by" Cameron.
    # Titanic, to be directed "by" Cameron, won Oscar.
    transformation {
      target: "prep"
      action: CHANGE_LABEL
      label: "l-pass-by"
    }
  }
}

rulegroup {
  name: "Conjunctions"
  priority: 1
  rule {
    name: "amod conjunction"
    priority: 1
    tregex: "l-conj=conj [< /t-J.*/ $ /t-J.*/]"
    # I have a blue and "black" pencil.
    # (l-nsubj (l-p (l-dobj w-have (l-det (l-amod w-pencil (l-cc (l-conj-amod w-blue w-black) w-and)) w-a)) w-.) w-I)
    transformation {
      target: "conj"
      action: CHANGE_LABEL
      label: "l-conj-amod"
    }
  }
  rule {
    name: "nn conjunction"
    priority: 1
    tregex: "l-conj=conj [< /t-N.*/ $ /t-N.*/ > l-nn]"
    transformation {
      target: "conj"
      action: CHANGE_LABEL
      label: "l-conj-nn"
    }
  }
  rule {
    name: "advmod conjunction"
    priority: 1
    tregex: "l-conj=conj [ < /t-R.*/ $ /t-R.*/]"
    # John ate noodles quickly and "steadily".
    # (l-nsubj (l-p (l-advmod (l-dobj w-ate w-noodles) (l-cc (l-conj-advmod w-quickly w-steadily) w-and)) w-.) w-John)
    transformation {
      target: "conj"
      action: CHANGE_LABEL
      label: "l-conj-advmod"
    }
  }
  rule {
    name: "NP conjunction with no prep on second noun"
    priority: 2
    tregex: "l-conj=conj [< /t-(N.*|CD|[$]|PRP.*)/ !< l-prep $ /t-(N.*|CD|[$]|PRP.*|J.*)/]"
    # The founder and "president" of Apple.
    # (l-cc (l-prep (l-det (l-conj-np w-founder w-president) w-the) (l-pobj w-of w-Apple)) w-and)
    # The blue and the "black" pen.
    transformation {
      target: "conj"
      action: CHANGE_LABEL
      label: "l-conj-np"
    }
  }
  rule {
    name: "NP conjunction with prep on second noun"
    priority: 1
    tregex: "l-conj=conj [< /t-(N.*|CD|[$]|PRP.*)/ < l-prep $ /t-(N.*|CD|[$]|PRP.*)/]"
    # the founder of Apple and the "president" of Pixar.
    # (l-cc (l-conj-np-prep (l-prep (l-det w-founder w-the) (l-pobj w-of w-Apple)) (l-prep w-president (l-pobj w-of w-Pixar))) w-and)
    transformation {
      target: "conj"
      action: CHANGE_LABEL
      label: "l-conj-np-prep"
    }
  }
  rule {
    name: "PP conjunction with noun as head of first pp, and with no pobj on second pp."
    priority: 1
    tregex: "l-conj=conj [< /t-IN/ !< /l-pobj/ $ /t-IN/ > (/l-prep/ $ /t-N.*/)]"
    # sales before and "after" the campaign.
    # (l-prep w-sales (l-cc (l-pobj (l-conj-pp-np w-before w-after) (l-det w-campaign w-the)) w-and))
    transformation {
      target: "conj"
      action: CHANGE_LABEL
      label: "l-conj-pp-np"
    }
  }
  rule {
    name: "PP conjunction with noun as head of first pp, and with pobj on second pp."
    priority: 1
    tregex: "l-conj=conj [< /t-IN/ < /l-pobj/ $ /t-IN/ > (/l-prep/ $ /t-N.*/)]"
    # sales, before the campaign and "after" the festival
    # (l-cc (l-conj-pp-np-pobj (l-pobj w-before (l-det w-campaign w-the)) (l-pobj w-after (l-det w-festival w-the))) w-and)
    transformation {
      target: "conj"
      action: CHANGE_LABEL
      label: "l-conj-pp-np-pobj"
    }
  }
  rule {
    name: "PP conjunction with verb as head of first pp, and with no pobj on second pp."
    priority: 1
    tregex: "l-conj=conj [< /t-IN/ !< /l-pobj/ $ /t-IN/ > (/l-prep/ $ /t-V.*/)]"
    # DiCaprio acted in and "as" Gatsby
    # (l-nsubj (l-prep w-acted (l-cc (l-pobj (l-conj-pp-vp w-in w-as) w-Gatsby) w-and)) w-DiCaprio)
    transformation {
      target: "conj"
      action: CHANGE_LABEL
      label: "l-conj-pp-vp"
    }
  }
  rule {
    name: "PP conjunction with verb as head of first pp, and with pobj on second pp."
    priority: 1
    tregex: "l-conj=conj [< /t-IN/ < /l-pobj/ $ /t-IN/ > (/l-prep/ $ /t-V.*/)]"
    # Audience left during the match or "after" the ceremony.
    # (l-cc (l-conj-pp-vp-pobj (l-pobj w-during (l-det w-match w-the)) (l-pobj w-after (l-det w-ceremony w-the))) w-or)
    transformation {
      target: "conj"
      action: CHANGE_LABEL
      label: "l-conj-pp-vp-pobj"
    }
  }
  rule {
    name: "S conjunction"
    priority: 1
    tregex: "l-conj=conj [< /t-V.*/ < /l-(nsubj|nsubjpass)/ $ /t-V.*/]"
    # Dell sells computers and Apple "makes" mobiles.
    # (l-cc (l-conj-s (l-nsubj (l-p (l-dobj w-sells w-computers) w-.) w-Dell) (l-nsubj (l-dobj w-makes w-mobiles) w-Apple)) w-and)
    transformation {
      target: "conj"
      action: CHANGE_LABEL
      label: "l-conj-s"
    }
  }
  rule {
    name: "V conjunction"
    priority: 1
    tregex: "l-conj=conj [< /t-V.*/ !< l-nsubj !< l-dobj !< l-auxpass $ /t-V.*/ $ l-dobj]"
    # Dell makes and "distributes" electronic products.
    # l-auxpass condition is necessary to prevent false match for "Connie Booth played a girl in Monty Python and was married to John Cleese."
    # (l-cc (l-nsubj (l-p (l-dobj (l-conj-v w-makes w-distributes) w-products) w-.) w-Dell) w-and)
    transformation {
      target: "conj"
      action: CHANGE_LABEL
      label: "l-conj-v"
    }
  }
  rule {
    name: "VP conjunction"
    priority: 2
    tregex: "l-conj=conj [< /t-V.*/ !< /l-(nsubj|nsubjpass)/ $ /t-V.*/]"
    # Mary likes apples but "loves" oranges.
    # (l-cc (l-nsubj (l-p (l-conj-vp (l-dobj w-likes w-apples) (l-dobj w-loves w-oranges)) w-.) w-Mary) w-but)
    # Airways flies from Africa, and "halts" in America.
    # (l-nsubj (l-p (l-p (l-cc (l-conj-vp (l-prep w-flies (l-pobj w-from w-Africa)) (l-prep w-halts (l-pobj w-in w-America))) w-and) w-,) w-.) w-Airways)
    transformation {
      target: "conj"
      action: CHANGE_LABEL
      label: "l-conj-vp"
    }
  }
}
rulegroup {
  name: "Adjectival Phrases"
  priority: 1
  rule {
    name: "Adjective is the head of the sentence and is modified by a verb"
    priority: 1
    tregex: "l-ROOT=target [< /t-J.*/=tag & < (/l-.*/ < /t-V.*/)]"
    # Edinburgh is "famous" for Arts.
    # What is Janelle_Monae "famous" for?
    # Note: This is a hack to get around a bug in the constituency converter.
    #       Once the fix is pushed, this rule should be removed and we need to
    #       handle acomp properly instead.
    transformation {
      target: "tag"
      action: CHANGE_LABEL
      label: "t-VB"
    }
  }
}